<?php

/**
 * @file
 * Contains role_change_notify.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\role_change_notify\Event\RoleChangeNotifyUserUpdateEvent;
use Drupal\Component\Utility\Html;

const ROLE_CHANGE_NOTIFY_SUBJECT_DEFAULT = 'Role [role_change_notify:role_added] added for [user:name] at [site:name]';
const ROLE_CHANGE_NOTIFY_BODY_DEFAULT = "[user:name],\n\nThe role \"[role_change_notify:role_added]\" has been added to your account at  [site:name].\n\nYou may now use the associated privileges.";

/**
 * Implements hook_help().
 */
function role_change_notify_help($route_name, RouteMatchInterface $route_match) {
  $output = '';
  switch ($route_name) {

    case 'help.page.role_change_notify':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Send email to users when a new role is assigned to them.') . '</p>';
      break;

    case 'role_change_notify.admin_settings':
      $config = \Drupal::config('system.site');
      $site_mail = $config->get('mail');
      if (!\Drupal::service('email.validator')->isValid($site_mail)) {
        drupal_set_message(t('None of these notifications will be sent unless you specify a valid site !email_address on the !site_information settings page.', array('!email_address' => '<strong>' . t('E-mail address') . '</strong>', '!site_information' => \Drupal\Core\Link::fromTextAndUrl(t('Site information'), \Drupal\Core\Url::fromRoute('system.site_information_settings'))->toString())), 'error');
      }
      $output .= '<p>' . t('This page allows you to configure whether automatic emails should be sent to users when a new role is assigned to them. You define if an email should be sent for each role type, and if so, you define what the subject and body of the resulting email will be.') . '</p>'
        . '<p>' . t('For any of the settings below, you can use placeholders which will be substituted with the current values for the user, role, and site.') . ' ';
      $output .= '</p>';
      break;

  }
  return $output;
}

/**
 * Implements hook_theme().
 */
function role_change_notify_theme($existing, $type, $theme, $path) {
  $themes = [];

  $themes['role_change_notify'] = [
    'variables' => [

    ],
    // Note that there is no need to indicate the template name, in absence of
    // it the system will assume "role_change_notify.html.twig", inside "templates" dir.
  ];

  return $themes;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function role_change_notify_form_user_admin_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('role_change_notify.settings');
  $email_token_help = t('Available variables are: [site:name], [site:url], [user:role-changed], [user:name], [user:mail], [site:login-url], [site:url-brief], [user:edit-url].');

  $form['role_change_notify'] = [
    '#type' => 'details',
    '#title' => t('Role change notifications'),
    '#open' => FALSE,
    '#description' => t('Edit the e-mail message sent to users when a role has been added to their account.') . ' ' . $email_token_help,
    '#group' => 'email',
    '#weight' => 20,
  ];
  $subject_from_config = $config->get('role_change_notify_role_added_subject');
  $default_subject = !empty($subject_from_config) ? $subject_from_config : ROLE_CHANGE_NOTIFY_SUBJECT_DEFAULT;
  $form['role_change_notify']['role_change_notify_role_added_subject'] = [
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $default_subject,
    '#size' => 72,
    '#maxlength' => 200,
    '#token_types' => ['user'],
  ];
  $body_from_config = $config->get('role_change_notify_role_added_body');
  $default_body = !empty($body_from_config) ? $body_from_config : ROLE_CHANGE_NOTIFY_BODY_DEFAULT;
  $form['role_change_notify']['role_change_notify_role_added_body'] = [
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $default_body,
    '#cols' => 72,
    '#rows' => 10,
    '#description' => '',
    '#token_types' => ['user'],
  ];

  if (\Drupal::moduleHandler()->moduleExists('token')) {
    $form['role_change_notify']['role_change_notify_role_added_subject']['#element_validate'] = array('token_element_validate');
    $form['role_change_notify']['role_change_notify_role_added_body']['#element_validate'] = array('token_element_validate');
  }

  // Add a custom submit to save the configuration values we just added.
  $form['#submit'][] = 'role_change_notify_user_admin_settings_submit';
}

/**
 * Form submission handler for user_admin_settings().
 *
 * @see role_change_notify_form_user_admin_settings_alter()
 */
function role_change_notify_user_admin_settings_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('role_change_notify.settings')
    ->set('role_change_notify_role_added_subject', $form_state->getValue('role_change_notify_role_added_subject'))
    ->set('role_change_notify_role_added_body', $form_state->getValue('role_change_notify_role_added_body'))
    ->save();
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function role_change_notify_user_update(Drupal\Core\Entity\EntityInterface $entity) {
  // Trigger the event that a user entity was just updated.
  \Drupal::service('event_dispatcher')->dispatch(\Drupal\role_change_notify\Event\RoleChangeNotifyEvents::USERUPDATE, new RoleChangeNotifyUserUpdateEvent($entity));
}

/**
 * Implements hook_mail().
 */
function role_change_notify_mail($key, &$message, $params) {
  if ($key == 'role_added') {
    $message['subject'] = Html::escape($params['context']['subject']);
    $message['body'][] = Html::escape($params['context']['body']);
    $message['from'] = $params['context']['from'];
    $message['headers'] = array_merge($message['headers'], $params['context']['headers']);
  }
}

/**
 * Implements hook_token_info().
 */
function role_change_notify_token_info() {
  $info['types']['role_change_notify'] = array(
    'name' => t('Role Change Notify token type.'),
    'description' => t('Role Change Notify token type.'),
  );

  $info['tokens']['role_change_notify']['role_added'] = array(
    'name' => t('The role added to the account.'),
    'description' => t('The role added to the account.'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function role_change_notify_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {

  if ($type == 'role_change_notify') {
    $replacements = [];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'role_added':
          $replacements[$original] = $data[$name];
      }
    }

    return $replacements;
  }
}
